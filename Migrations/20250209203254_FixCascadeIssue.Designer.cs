// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SavalAPI.Data;

#nullable disable

namespace SavalAPI.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250209203254_FixCascadeIssue")]
    partial class FixCascadeIssue
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("SavalAPI.Models.DetalleRespuesta", b =>
                {
                    b.Property<int>("IdDetalleRespuesta")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdDetalleRespuesta"));

                    b.Property<int>("IdOpcion")
                        .HasColumnType("int");

                    b.Property<int>("IdPregunta")
                        .HasColumnType("int");

                    b.Property<int>("IdRespuesta")
                        .HasColumnType("int");

                    b.HasKey("IdDetalleRespuesta");

                    b.HasIndex("IdOpcion");

                    b.HasIndex("IdPregunta");

                    b.HasIndex("IdRespuesta");

                    b.ToTable("DetallesRespuestas");
                });

            modelBuilder.Entity("SavalAPI.Models.FactorRiesgo", b =>
                {
                    b.Property<int>("IdFactor")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdFactor"));

                    b.Property<bool>("Habilitado")
                        .HasColumnType("bit");

                    b.Property<string>("TextoFactor")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdFactor");

                    b.ToTable("FactoresRiesgo");
                });

            modelBuilder.Entity("SavalAPI.Models.Formulario", b =>
                {
                    b.Property<int>("IdFormulario")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdFormulario"));

                    b.Property<bool>("Anonimo")
                        .HasColumnType("bit");

                    b.Property<string>("DescripcionFormulario")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("FechaFin")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FechaInicio")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Habilitado")
                        .HasColumnType("bit");

                    b.Property<string>("TituloFormulario")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdFormulario");

                    b.ToTable("Formularios");
                });

            modelBuilder.Entity("SavalAPI.Models.FormularioPregunta", b =>
                {
                    b.Property<int>("IdFormularioPregunta")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdFormularioPregunta"));

                    b.Property<int>("IdFormulario")
                        .HasColumnType("int");

                    b.Property<int>("IdPregunta")
                        .HasColumnType("int");

                    b.HasKey("IdFormularioPregunta");

                    b.HasIndex("IdFormulario");

                    b.HasIndex("IdPregunta");

                    b.ToTable("FormulariosPreguntas");
                });

            modelBuilder.Entity("SavalAPI.Models.OpcionRespuesta", b =>
                {
                    b.Property<int>("IdOpcion")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdOpcion"));

                    b.Property<int>("IdPregunta")
                        .HasColumnType("int");

                    b.Property<string>("NombreOpcion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdOpcion");

                    b.HasIndex("IdPregunta");

                    b.ToTable("OpcionesRespuestas");
                });

            modelBuilder.Entity("SavalAPI.Models.Pregunta", b =>
                {
                    b.Property<int>("IdPregunta")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdPregunta"));

                    b.Property<string>("TextoPregunta")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TipoPregunta")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdPregunta");

                    b.ToTable("Preguntas");
                });

            modelBuilder.Entity("SavalAPI.Models.Recomendacion", b =>
                {
                    b.Property<int>("IdRecomendacion")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdRecomendacion"));

                    b.Property<bool>("Habilitado")
                        .HasColumnType("bit");

                    b.Property<string>("TextoRecomendacion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdRecomendacion");

                    b.ToTable("Recomendaciones");
                });

            modelBuilder.Entity("SavalAPI.Models.ReglaOpcion", b =>
                {
                    b.Property<int>("IdRegla")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdRegla"));

                    b.Property<string>("Condicion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("IdFactorRiesgo")
                        .HasColumnType("int");

                    b.Property<int>("IdOpcion")
                        .HasColumnType("int");

                    b.Property<int?>("IdRecomendacion")
                        .HasColumnType("int");

                    b.HasKey("IdRegla");

                    b.HasIndex("IdFactorRiesgo");

                    b.HasIndex("IdOpcion");

                    b.HasIndex("IdRecomendacion");

                    b.ToTable("ReglasOpciones");
                });

            modelBuilder.Entity("SavalAPI.Models.Respuesta", b =>
                {
                    b.Property<int>("IdRespuesta")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdRespuesta"));

                    b.Property<DateTime>("FechaRespuesta")
                        .HasColumnType("datetime2");

                    b.Property<int>("IdFormulario")
                        .HasColumnType("int");

                    b.Property<string>("IdentificacionEncuestado")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdRespuesta");

                    b.HasIndex("IdFormulario");

                    b.ToTable("Respuestas");
                });

            modelBuilder.Entity("SavalAPI.Models.Rol", b =>
                {
                    b.Property<int>("IdRol")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdRol"));

                    b.Property<string>("NombreRol")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdRol");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("SavalAPI.Models.Usuario", b =>
                {
                    b.Property<int>("IdUsuario")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdUsuario"));

                    b.Property<string>("Contraseña")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Correo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("IdRol")
                        .HasColumnType("int");

                    b.HasKey("IdUsuario");

                    b.HasIndex("IdRol");

                    b.ToTable("Usuarios");
                });

            modelBuilder.Entity("SavalAPI.Models.DetalleRespuesta", b =>
                {
                    b.HasOne("SavalAPI.Models.OpcionRespuesta", "Opcion")
                        .WithMany()
                        .HasForeignKey("IdOpcion")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SavalAPI.Models.Pregunta", "Pregunta")
                        .WithMany()
                        .HasForeignKey("IdPregunta")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SavalAPI.Models.Respuesta", "Respuesta")
                        .WithMany("Detalles")
                        .HasForeignKey("IdRespuesta")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Opcion");

                    b.Navigation("Pregunta");

                    b.Navigation("Respuesta");
                });

            modelBuilder.Entity("SavalAPI.Models.FormularioPregunta", b =>
                {
                    b.HasOne("SavalAPI.Models.Formulario", "Formulario")
                        .WithMany("Preguntas")
                        .HasForeignKey("IdFormulario")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SavalAPI.Models.Pregunta", "Pregunta")
                        .WithMany("Formularios")
                        .HasForeignKey("IdPregunta")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Formulario");

                    b.Navigation("Pregunta");
                });

            modelBuilder.Entity("SavalAPI.Models.OpcionRespuesta", b =>
                {
                    b.HasOne("SavalAPI.Models.Pregunta", "Pregunta")
                        .WithMany("Opciones")
                        .HasForeignKey("IdPregunta")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Pregunta");
                });

            modelBuilder.Entity("SavalAPI.Models.ReglaOpcion", b =>
                {
                    b.HasOne("SavalAPI.Models.FactorRiesgo", "FactorRiesgo")
                        .WithMany()
                        .HasForeignKey("IdFactorRiesgo")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("SavalAPI.Models.OpcionRespuesta", "Opcion")
                        .WithMany()
                        .HasForeignKey("IdOpcion")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SavalAPI.Models.Recomendacion", "Recomendacion")
                        .WithMany()
                        .HasForeignKey("IdRecomendacion")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("FactorRiesgo");

                    b.Navigation("Opcion");

                    b.Navigation("Recomendacion");
                });

            modelBuilder.Entity("SavalAPI.Models.Respuesta", b =>
                {
                    b.HasOne("SavalAPI.Models.Formulario", "Formulario")
                        .WithMany()
                        .HasForeignKey("IdFormulario")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Formulario");
                });

            modelBuilder.Entity("SavalAPI.Models.Usuario", b =>
                {
                    b.HasOne("SavalAPI.Models.Rol", "Rol")
                        .WithMany()
                        .HasForeignKey("IdRol")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Rol");
                });

            modelBuilder.Entity("SavalAPI.Models.Formulario", b =>
                {
                    b.Navigation("Preguntas");
                });

            modelBuilder.Entity("SavalAPI.Models.Pregunta", b =>
                {
                    b.Navigation("Formularios");

                    b.Navigation("Opciones");
                });

            modelBuilder.Entity("SavalAPI.Models.Respuesta", b =>
                {
                    b.Navigation("Detalles");
                });
#pragma warning restore 612, 618
        }
    }
}
